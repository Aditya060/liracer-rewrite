{"version":3,"sources":["colors.js","components/Window.js","components/ChatAndJoinButton.js","components/CodeField.js","App.js","serviceWorker.js","index.js"],"names":["colors","layer0Background","layer1Background","layer1Foreground","layer2Background","Titlebar","styled","div","Content","Window","children","FlexBox","Messages","ChatForm","form","ChatInput","input","buttonCSS","layer2Foreground","ChatSubmit","button","JoinButtonContainer","JoinButton","ChatAndJoinButton","onSubmit","event","preventDefault","onClick","prompt","Wrapper","CodeField","Grid","App","isMobile","window","navigator","any","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4LAOeA,EAPA,CACXC,iBAAkB,UAClBC,iBAAkB,UAClBC,iBAAkB,UAClBC,iBAAkB,W,mOCAtB,IAEMC,EAAWC,IAAOC,IAAV,IAFS,OAIPP,EAAOI,kBAGjBI,EAAUF,IAAOC,IAAV,IAPU,OASPP,EAAOE,kBAYRO,EATA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,6BACE,kBAACL,EAAD,MACA,kBAACG,EAAD,KAAUE,K,ukCCkBhB,IAAMC,EAAUL,IAAOC,IAAV,KAMPK,EAAWN,IAAOC,IAAV,IAGHP,EAAOG,kBAGZU,EAAWP,IAAOQ,KAAV,IACEd,EAAOI,kBAOjBW,EAAYT,IAAOU,MAAV,IACChB,EAAOE,iBACZF,EAAOG,iBAMUH,EAAOI,kBAG7Ba,EAAS,wCAEGjB,EAAOI,iBAFV,yBAGFJ,EAAOkB,iBAHL,iCAKClB,EAAOE,iBALR,uBAMJF,EAAOG,iBANH,0KAiBTgB,EAAab,IAAOc,OAAV,IACZH,EAEcjB,EAAOI,kBAGnBiB,EAAsBf,IAAOC,IAAV,IACOP,EAAOI,iBAIvBJ,EAAOI,kBAGjBkB,EAAahB,IAAOc,OAAV,IACZH,GA2BWM,EAtBW,WACxB,OACE,kBAAC,EAAD,KACE,kBAACZ,EAAD,KACE,kBAACC,EAAD,KACE,wCADF,gEAEE,8BAEF,kBAACC,EAAD,CAAUW,SAAU,SAACC,GAAD,OAAWA,EAAMC,mBACnC,kBAACX,EAAD,MACA,kBAACI,EAAD,cAEF,kBAACE,EAAD,KACE,kBAACC,EAAD,CAAYK,QAAS,kBAAMC,OAAO,YAAlC,iB,mHCnHV,IAEMC,EAAUvB,IAAOC,IAAV,IAFU,QAiBRuB,EAVG,WAChB,OACE,kBAAC,EAAD,KACE,kBAACD,EAAD,qB,kYCRN,IAAME,EAAOzB,IAAOC,IAAV,IAgBMP,EAAOC,kBAiBR+B,MAdf,WACE,OAAOC,YAASC,OAAOC,WAAWC,IAChC,6BACE,2EACA,yFAGF,kBAACL,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCtBcM,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBV,WACrBA,UAAUW,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.12f64678.chunk.js","sourcesContent":["const colors = {\n    layer0Background: '#fdf6e3',\n    layer1Background: '#eee8d5',\n    layer1Foreground: '#4d4a44',\n    layer2Background: '#ded8c5'\n}\n\nexport default colors","import React from 'react'\nimport styled from 'styled-components'\nimport colors from '../colors'\n\nconst titleBarHeight = '30px'\n\nconst Titlebar = styled.div`\n  height: ${titleBarHeight};\n  background: ${colors.layer2Background};\n`\n\nconst Content = styled.div`\n  height: calc(100% - ${titleBarHeight});\n  background: ${colors.layer1Background};\n`\n\nconst Window = ({ children }) => {\n  return (\n    <div>\n      <Titlebar/>\n      <Content>{children}</Content>\n    </div>\n  )\n}\n\nexport default Window","// const InputContainer = styled.div`\n//   background: ${colors.layer2Background};\n//   flex-basis: auto;\n//   display: flex;\n//   height: 50px;\n//   padding: calc(1rem / 2);\n//   box-sizing: border-box;\n// `\n\n// const JoinButtonContainer = styled.div`\n//   background: ${colors.layer2Background};\n//   flex-basis: 90px;\n//   padding-left: 1em;\n// `\n\n// const JoinButton = styled.button`\n//   :hover {\n  //     background: ${colors.layer2Background};\n  //     color: ${colors.layer2Foreground};\n  //   }\n  //   background: ${colors.layer1Background};\n  //   color: ${colors.layer1Foreground};\n  //   transition-duration: 0.12s;\n  //   height: 100%;\n  //   width: 100%;\n  //   font-weight: bold;\n  //   font-size: 14px;\n  //   padding: 0;\n//   border: solid ${colors.layer2Background} 0;\n//   border-radius: 5px;\n//   cursor: pointer;\n//   outline: none;\n// `\nimport React from 'react'\nimport Window from './Window'\nimport styled from 'styled-components'\nimport colors from '../colors'\n\nconst FlexBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst Messages = styled.div`\n  flex-basis: 100%;\n  padding: 1rem;\n  color: ${colors.layer1Foreground};\n`\n\nconst ChatForm = styled.form`\n  background: ${colors.layer2Background};\n  height: 50px;\n  display: flex;\n  padding: calc(1rem / 2);\n  box-sizing: border-box;\n`\n\nconst ChatInput = styled.input`\n  background: ${colors.layer1Background};\n  color: ${colors.layer1Foreground};\n  border: 0;\n  width: 100%;\n  padding: 0 3px 3px 0;\n  box-sizing: border-box;\n  outline: none;\n  border-right: 1em solid ${colors.layer2Background};\n`\n\nconst buttonCSS = `\n  :hover {\n    background: ${colors.layer2Background};\n    color: ${colors.layer2Foreground};\n  }\n  background: ${colors.layer1Background};\n  color: ${colors.layer1Foreground};\n  transition-duration: 0.12s;\n  font-weight: bold;\n  font-size: 14px;\n  padding: 0;\n  cursor: pointer;\n  border: 0;\n  border-radius: 5px;\n  outline: none;\n`\n\nconst ChatSubmit = styled.button`\n  ${buttonCSS}\n  width: 70px;\n  border: solid ${colors.layer2Background} 0;\n`\n\nconst JoinButtonContainer = styled.div`\n  border: calc(1em / 2) solid ${colors.layer2Background};\n  border-top: 0;\n  height: 40px;\n  box-sizing: border-box;\n  background: ${colors.layer2Background};\n`\n\nconst JoinButton = styled.button`\n  ${buttonCSS}\n  height: 100%;\n  width: 100%;\n`\n\nconst ChatAndJoinButton = () => {\n  return (\n    <Window>\n      <FlexBox>\n        <Messages>\n          <b>&lt;liracer&gt;</b> Click the JOIN button or type /join &lt;gameid&gt; to join a game. \n          <br/>\n        </Messages>\n        <ChatForm onSubmit={(event) => event.preventDefault() }>\n          <ChatInput />\n          <ChatSubmit>SEND</ChatSubmit>\n        </ChatForm>\n        <JoinButtonContainer>\n          <JoinButton onClick={() => prompt('GameID')}>\n            JOIN GAME\n          </JoinButton>\n        </JoinButtonContainer>\n      </FlexBox>\n    </Window>\n  )\n}\n\nexport default ChatAndJoinButton","import React from 'react'\nimport Window from './Window'\nimport styled from 'styled-components'\n\nconst contentPadding = '1rem'\n\nconst Wrapper = styled.div`\n  padding: ${contentPadding};\n  font-family: monospace;\n`\n\nconst CodeField = () => {\n  return (\n    <Window>\n      <Wrapper>\n        Code field\n      </Wrapper>\n    </Window>\n  )\n}\n\nexport default CodeField","import React from 'react'\nimport styled from 'styled-components'\nimport ChatAndJoinButton from './components/ChatAndJoinButton'\nimport CodeField from './components/CodeField'\nimport colors from './colors'\nimport isMobile from 'ismobilejs'\nconst Grid = styled.div`\n  // Consume the entire viewport\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  overflow: auto;\n\n  // Use a grid layout\n  display: grid;\n  grid-template-columns: minmax(300px, 500px) minmax(750px, auto);\n  padding: 2rem;\n  column-gap: 2rem;\n\n  // Color\n  background: ${colors.layer0Background}\n`\n\nfunction App() {\n  return isMobile(window.navigator).any ? (\n    <div>\n      <h3>This game is not playable on mobile devices</h3>\n      <p>To play liracer, open it on a laptop or desktop computer.</p>\n    </div>\n  ) : (\n    <Grid>\n      <ChatAndJoinButton />\n      <CodeField />\n    </Grid>\n  ) \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}